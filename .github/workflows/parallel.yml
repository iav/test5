name: buildx for dockerhub

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  # TODO: Change variable to your image's name.
#   IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
   IMAGE_NAME: shtripok/test3
   DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  # DOCKERHUB_TOKEN should be set in "secrets" property of github repository

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_all_buildx:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_ID:  ${{ steps.setvars.outputs.IMAGE_ID }}
      VERSION:  ${{ steps.setvars.outputs.VERSION }}
    steps:
      -
        name: Prepare container names
        id: setvars
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "::set-output name=IMAGE_ID::$IMAGE_ID"
          echo "::set-output name=VERSION::$VERSION"


  buildx-matrix:
    needs: prepare_all_buildx
#    runs-on: ubuntu-latest
#    runs-on: self-hosted
    runs-on: ${{ matrix.runner }}
    env:
        IMAGE_ID: ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
        VERSION: ${{ needs.prepare_all_buildx.outputs.VERSION }}
    strategy:
        matrix:
          platform: [ amd64, arm64, armv7 ]
          include:
            - platform: arm64
              runner: [self-hosted, linux, ARM64]
              buildxplatform: linux/arm64
              RUST_TARGET: aarch64-unknown-linux-musl
            - platform: amd64
              runner: ubuntu-latest
              buildxplatform: linux/amd64
              RUST_TARGET: x86_64-unknown-linux-musl
              strategy.fail-fast: false
            - platform: armv7
              runner: [self-hosted, linux, armv7]
              buildxplatform: linux/arm/v7
              RUST_TARGET: armv7-unknown-linux-musleabihf

    steps:

      -
        name: Git checkout
        uses: actions/checkout@v2

      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      -
        name: Buildx ${{ matrix.platform }}
        run: |
          docker buildx build \
            --platform ${{ matrix.buildxplatform }} \
            --tag $IMAGE_ID:$VERSION-${{ matrix.platform }} \
            --build-arg RUST_TARGET=${{ matrix.RUST_TARGET }} \
            --progress plain \
            --load .


  make_manifest:
    runs-on: ubuntu-latest
#    needs: [ buildx_arm64, buildx_armv7, buildx_amd64 ]
    needs: buildx-matrix
    env:
        IMAGE_ID: ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
        VERSION: ${{ needs.prepare_all_buildx.outputs.VERSION }}
    steps:
      -
        name: Checkout
        run:  echo "build complete $(date)"


